require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const mongoose = require("mongoose");

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ!"))
  .catch((err) => console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", err));

// –°–æ–∑–¥–∞—ë–º —Å—Ö–µ–º—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userSchema = new mongoose.Schema({
  telegramId: { type: Number, unique: true },
  username: String,
  referredBy: Number, // ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  referrals: { type: Number, default: 0 },
});

const User = mongoose.model("User", userSchema);

const bot = new Telegraf(process.env.BOT_TOKEN);
const CHANNEL_ID = process.env.CHANNEL_ID.replace("@", ""); // –£–±–∏—Ä–∞–µ–º @ –∏–∑ CHANNEL_ID

// üî• –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∞–¥–º–∏–Ω–æ–≤
const ADMIN_IDS = process.env.ADMIN_IDS.split(",").map(id => parseInt(id.trim(), 10));

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
function isAdmin(userId) {
  return ADMIN_IDS.includes(userId);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async function isUserSubscribed(userId) {
  try {
    const chatMember = await bot.telegram.getChatMember(`@${CHANNEL_ID}`, userId);
    return ["member", "administrator", "creator"].includes(chatMember.status);
  } catch (error) {
    return false;
  }
}

// üî• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
bot.start(async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username || "unknown";
  const referralId = ctx.message.text.split(" ")[1];

  let user = await User.findOne({ telegramId: userId });

  if (!user) {
    user = new User({ telegramId: userId, username, referredBy: referralId });
    await user.save();

    if (referralId) {
      const referrer = await User.findOne({ telegramId: referralId });
      if (referrer) {
        referrer.referrals += 1;
        await referrer.save();
      }
    }
  }

  // –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
  const referralLink = `https://t.me/${ctx.botInfo.username}?start=${userId}`;
  const channelLink = `https://t.me/${CHANNEL_ID}`;

  await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç, ${username}! –í–æ—Ç —Ç–≤–æ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: \nüîó ${referralLink}\n\nüì¢ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –≤ –∫–∞–Ω–∞–ª: ${channelLink}\n\nüë• –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π —Ç—ã –ø—Ä–∏–≥–ª–∞—Å–∏—à—å, —Ç–µ–º –≤—ã—à–µ —Ç–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥!`
  );

  if (isAdmin(userId)) {
    showAdminMenu(ctx);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function showAdminMenu(ctx) {
  ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    Markup.keyboard([
      ["–ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
    ]).resize()
  );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.hears("–ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞", async (ctx) => {
  if (!isAdmin(ctx.from.id)) return;

  const referralLink = `https://t.me/${ctx.botInfo.username}?start=${ctx.from.id}`;
  const channelLink = `https://t.me/${CHANNEL_ID}`;

  await ctx.reply(
    `–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ª—é–¥–µ–π –≤ –∫–∞–Ω–∞–ª:\nüîó ${referralLink}\n\nüì¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: ${channelLink}`
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.hears("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", async (ctx) => {
  if (!isAdmin(ctx.from.id)) return;

  const users = await User.find().sort({ referrals: -1 });
  let message = "üìä –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤:\n";
  
  users.forEach((u, index) => {
    message += `${index + 1}. @${u.username || "Unknown"} - ${u.referrals} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n`;
  });

  await ctx.reply(message || "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–ª –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.");
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
